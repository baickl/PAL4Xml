
#ifndef _XML_ATTRIBUTE_H_
#define _XML_ATTRIBUTE_H_

#include <string>

//>	----------------------------------------------------------------------------


namespace xnd
{

/*>	---------------------------------------------------------------------------
	XML属性数据类型枚举
---------------------------------------------------------------------------	<*/
enum XmlDataType	//>	数据类型
{
	XML_CHAR,			///<字符型
	XML_INT,			///<整型
	XML_FLOAT,			///<浮点型
	XML_STRING,			///<字符串型
	XML_BINARY,			///<二进制类型
};

/*!
 *******************************************************************************
 *	
 *******************************************************************************
 *
 *	\brief		xml文件属性操作类
 *
 *	\author		陈治国
 *
 *	\version	0.5
 *
 *	\date		2006-06-11
 *	\date		2006-08-28
 *	\date		2006-11-15
 *	\date		2007-01-05
 *
 *	\bug		暂无
 *
 *	\warning	暂无
 *
 ******************************************************************************
 */
class XmlAttribute
{
public:

	/*!
	 *******************************************************************************
	 *	默认构造函数
	 *******************************************************************************
	 */
	XmlAttribute( void );

	/*!
	 *******************************************************************************
	 *	拷贝构造函数
	 *******************************************************************************
	 *	\param[in] const XmlAttribute& xa 属性
	 *******************************************************************************
	 */
	XmlAttribute(const XmlAttribute& xa);

	/*!
	 *******************************************************************************
	 *	构造函数
	 *******************************************************************************
	 *	\param[in]	XmlDataType xdt				属性类型
	 *	\param[in]	const std::string& attrName	属性名称
	 *******************************************************************************
	 */
	XmlAttribute(XmlDataType xdt,const char* attrName);	

	/*!
	 *******************************************************************************
	 *	构造函数，并设置属性值
	 *******************************************************************************
	 */
	XmlAttribute(const char* attrName, const char&  chVal );
	XmlAttribute(const char* attrName, const int&   nVal  );
	XmlAttribute(const char* attrName, const float& rVal  );
	XmlAttribute(const char* attrName, const char*  strVal);
	XmlAttribute(const char* attrName, const void*  pBuff,int nSize);

	/*!
	 *******************************************************************************
	 *	虚析构函数
	 *******************************************************************************
	 */
	~XmlAttribute( void );

public:

	/*!
	 *******************************************************************************
	 *	清除属性
	 *******************************************************************************
	 */
	void				clear( void );

	/*!
	 *******************************************************************************
	 *	赋值操作
	 *******************************************************************************
	 *	\param[in]	const XmlAttribute& xa	欲赋值的
	 *	\return		XmlAttribute&			返回赋值成功后的属性
	 *******************************************************************************
	 */
	XmlAttribute&		operator = (const XmlAttribute& xa);
	
	/*!
	 *******************************************************************************
	 *	比较当前两个结点是否相同
	 *******************************************************************************
	 */
	bool				operator == ( const XmlAttribute& xa )  const;

	
public:

	/*!
	 *******************************************************************************
	 *	取得属性的类型
	 *******************************************************************************
	 *	\return XmlDataType 返回属性类型
	 *******************************************************************************
	 */
	XmlDataType			getType( void ) const {	return m_Type; }

	/*!
	 *******************************************************************************
	 *	取得属性的名称
	 *******************************************************************************
	 *	\return std::string 返回属性名称
	 *******************************************************************************
	 */
	const char*			getName( void ) const { return m_Name.c_str(); }

	/*!
	 *******************************************************************************
	 *	取得属性数据长度
	 *******************************************************************************
	 */
	int					getLength( void ) const;

public:

	
	/*!
	 *******************************************************************************
	 *	取得属性值，并转换成char类型
	 *******************************************************************************
	 *	\param[in] const char& 默认值，转换失败时将用
	 *  \return    char        返回char值
	 *******************************************************************************
	 */
	char				getValueAsChar( const char& defval = '\0' ) const ;

	/*!
	 *******************************************************************************
	 *	取得属性值，并转换成int类型
	 *******************************************************************************
	 *	\param[in] const int& 默认值，转换失败时将用
	 *  \return    int        返回int值
	 *******************************************************************************
	 */
	int					getValueAsInt( const int& defval = 0) const ;

	/*!
	 *******************************************************************************
	 *	取得属性值，并转换成float类型
	 *******************************************************************************
	 *	\param[in] const float& 默认值，转换失败时将用
	 *  \return    float        返回float值
	 *******************************************************************************
	 */
	float				getValueAsFloat( const float& defval = 0.0f ) const ;

	/*!
	 *******************************************************************************
	 *	取得属性值，并转换成std::string类型
	 *******************************************************************************
	 *	\param[in] const std::string& 默认值，转换失败时将用
	 *  \return    std::string        返回std::string值
	 *******************************************************************************
	 */
	std::string			getValueAsString( const char* defval = "\0" ) const ;


	/*!
	 *******************************************************************************
	 *	取得属性值，并转换成二进制类型
	 *******************************************************************************
	 *	\param[out]	void* outdata			输出数据
	 *	\param[in]	const int& iSize		数据大小	
	 *	\return		int						实际取得的数据大小，
	 *										如果返回0，则表示没有取出数据
	 *******************************************************************************
	 */
	int					getValueAsBinary( void* outdata,const int& iSize ) const ;

	/*!
	 *******************************************************************************
	 *	设置属性值为char类型
	 *******************************************************************************
	 *	\param[in] const char& val	待设置的数值
	 *  \return    bool				设置成功，返回true;设置失败，返回false
	 *******************************************************************************
	 */
	bool				setValueByChar( const char& val ) ;

	/*!
	 *******************************************************************************
	 *	设置属性值为int类型
	 *******************************************************************************
	 *	\param[in] const int&  val	待设置的数值
	 *  \return    bool				设置成功，返回true;设置失败，返回false
	 *******************************************************************************
	 */
	bool				setValueByInt( const int& val)  ;

	/*!
	 *******************************************************************************
	 *	设置属性值为float类型
	 *******************************************************************************
	 *	\param[in] const float& val	待设置的数值
	 *  \return    bool				设置成功，返回true;设置失败，返回false
	 *******************************************************************************
	 */
	bool				setValueByFloat( const float& val) ;

	/*!
	 *******************************************************************************
	 *	设置属性值为std::string类型
	 *******************************************************************************
	 *	\param[in] const std::string& val	待设置的数值
	 *  \return    bool						设置成功，返回true;设置失败，返回false
	 *******************************************************************************
	 */
	bool				setValueByString( const char* val) ;

	/*!
	 *******************************************************************************
	 *	设置数据
	 *******************************************************************************
	 *	
	 *******************************************************************************
	 */
	bool				setValueByBinary( const void* indata,const int& iSize );

private:

	struct privateValue
	{
		union
		{	
			char			charVal;			///< 字符值
			int				intVal;				///< 整型值
			float			floatVal;			///< 浮点值
			std::string*	stringVal;			///< 字符串值
			void*			binaryVal;			///< 二进制数据
		};
	};

private:

	std::string		m_Name;						///< 属性名称
	XmlDataType		m_Type;						///< 属性类型
	int				m_Len;						///< 数据长度，如果为二进制数据才有效
	privateValue	m_Value;					///< 数据值		
};

}//namespace

#endif//_XML_ATTRIBUTE_H_